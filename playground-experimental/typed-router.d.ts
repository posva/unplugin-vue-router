/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

// Custom route params parsers
type Param_date = ReturnType<NonNullable<typeof import('./src/params/date.ts').parser['get']>>

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/(home)': RouteRecordInfo<'/(home)', '/', Record<never, never>, Record<never, never>>,
    '/[...404]': RouteRecordInfo<'/[...404]', '/:404(.*)', { 404: ParamValue<false> }, { 404: ParamValue<false> }>,
    '/a.[b].c.[d]': RouteRecordInfo<'/a.[b].c.[d]', '/a/:b/c/:d', { b: ParamValue<false>, d: ParamValue<false> }, { b: ParamValue<false>, d: ParamValue<false> }>,
    '/b': RouteRecordInfo<'/b', '/b', Record<never, never>, Record<never, never>>,
    '/events/[when=date]': RouteRecordInfo<'/events/[when=date]', '/events/:when', { when: Param_date }, { when: Param_date }>,
    '/u[name]': RouteRecordInfo<'/u[name]', '/u:name', { name: ParamValue<false> }, { name: ParamValue<false> }, '/u[name]/24' | '/u[name]/[userId=int]'>,
    '/u[name]/[userId=int]': RouteRecordInfo<'/u[name]/[userId=int]', '/u:name/:userId', { name: ParamValue<false>, userId: number }, { name: ParamValue<false>, userId: number }>,
    '/u[name]/24': RouteRecordInfo<'/u[name]/24', '/u:name/24', { name: ParamValue<false> }, { name: ParamValue<false> }>,
    '/users/[userId=int]': RouteRecordInfo<'/users/[userId=int]', '/users/:userId', { userId: number }, { userId: number }>,
    '/users/sub-[first]-[second]': RouteRecordInfo<'/users/sub-[first]-[second]', '/users/sub-:first-:second', { first: ParamValue<false>, second: ParamValue<false> }, { first: ParamValue<false>, second: ParamValue<false> }>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/(home).vue': {
      routes: '/(home)'
      views: never
    }
    'src/pages/[...404].vue': {
      routes: '/[...404]'
      views: never
    }
    'src/pages/a.[b].c.[d].vue': {
      routes: '/a.[b].c.[d]'
      views: never
    }
    'src/pages/b.vue': {
      routes: '/b'
      views: never
    }
    'src/pages/events/[when=date].vue': {
      routes: '/events/[when=date]'
      views: never
    }
    'src/pages/u[name].vue': {
      routes: '/u[name]' | '/u[name]/[userId=int]' | '/u[name]/24'
      views: 'default'
    }
    'src/pages/u[name]/[userId=int].vue': {
      routes: '/u[name]/[userId=int]'
      views: never
    }
    'src/pages/u[name]/24.vue': {
      routes: '/u[name]/24'
      views: never
    }
    'src/pages/users/[userId=int].vue': {
      routes: '/users/[userId=int]'
      views: never
    }
    'src/pages/users/sub-[first]-[second].vue': {
      routes: '/users/sub-[first]-[second]'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
