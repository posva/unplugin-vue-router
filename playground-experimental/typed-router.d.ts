/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

// Custom route params parsers
type Param_date = ReturnType<NonNullable<typeof import('./src/params/date.ts').parser['get']>>

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/(home)': RouteRecordInfo<'/(home)', '/', Record<never, never>, Record<never, never>>,
    'not-found': RouteRecordInfo<'not-found', '/:path(.*)', { path: string, page?: number }, { path: string, page: number }>,
    '/a.[b].c.[d]': RouteRecordInfo<'/a.[b].c.[d]', '/a/:b/c/:d', { b: string, d: string }, { b: string, d: string }>,
    '/b': RouteRecordInfo<'/b', '/b', Record<never, never>, Record<never, never>>,
    '/blog/[slug]+': RouteRecordInfo<'/blog/[slug]+', '/blog/:slug+', { slug: string[] }, { slug: [string, ...string[]] }>,
    '/blog/[[slugOptional]]+': RouteRecordInfo<'/blog/[[slugOptional]]+', '/blog/:slugOptional*', { slugOptional?: string[] }, { slugOptional: string[] }>,
    '/blog/info/(info)': RouteRecordInfo<'/blog/info/(info)', '/blog/info', Record<never, never>, Record<never, never>>,
    '/blog/info/[[section]]': RouteRecordInfo<'/blog/info/[[section]]', '/blog/info/:section?', { section?: string | null }, { section: string | null }>,
    '/events/[when=date]': RouteRecordInfo<'/events/[when=date]', '/events/:when', { when: string }, { when: string }>,
    '/manually-added': RouteRecordInfo<'/manually-added', '/manually-added', Record<never, never>, Record<never, never>>,
    '/tests/[[optional]]/end': RouteRecordInfo<'/tests/[[optional]]/end', '/tests/:optional?/end', { optional?: string | null }, { optional: string | null }>,
    '/u[name]': RouteRecordInfo<'/u[name]', '/u:name', { name: string }, { name: string }, '/u[name]/24' | '/u[name]/[userId=int]'>,
    '/u[name]/[userId=int]': RouteRecordInfo<'/u[name]/[userId=int]', '/u:name/:userId', { name: string, userId: string }, { name: string, userId: string }>,
    '/u[name]/24': RouteRecordInfo<'/u[name]/24', '/u:name/24', { name: string }, { name: string }>,
    '/users/[userId=int]': RouteRecordInfo<'/users/[userId=int]', '/users/:userId', { userId: string, anyParam: null, page?: number }, { userId: string, anyParam: null, page: number }>,
    '/users/sub-[first]-[second]': RouteRecordInfo<'/users/sub-[first]-[second]', '/users/sub-:first-:second', { first: string, second: string }, { first: string, second: string }>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/(home).vue': {
      routes: '/(home)'
      views: never
    }
    'src/pages/[...path].vue': {
      routes: 'not-found'
      views: never
    }
    'src/pages/a.[b].c.[d].vue': {
      routes: '/a.[b].c.[d]'
      views: never
    }
    'src/pages/b.vue': {
      routes: '/b'
      views: never
    }
    'src/pages/blog/[slug]+.vue': {
      routes: '/blog/[slug]+'
      views: never
    }
    'src/pages/blog/[[slugOptional]]+.vue': {
      routes: '/blog/[[slugOptional]]+'
      views: never
    }
    'src/pages/blog/info/(info).vue': {
      routes: '/blog/info/(info)'
      views: never
    }
    'src/pages/blog/info/[[section]].vue': {
      routes: '/blog/info/[[section]]'
      views: never
    }
    'src/pages/events/[when=date].vue': {
      routes: '/events/[when=date]'
      views: never
    }
    'src/page-outside.vue': {
      routes: '/manually-added'
      views: never
    }
    'src/pages/tests/[[optional]]/end.vue': {
      routes: '/tests/[[optional]]/end'
      views: never
    }
    'src/pages/u[name].vue': {
      routes: '/u[name]' | '/u[name]/[userId=int]' | '/u[name]/24'
      views: 'default'
    }
    'src/pages/u[name]/[userId=int].vue': {
      routes: '/u[name]/[userId=int]'
      views: never
    }
    'src/pages/u[name]/24.vue': {
      routes: '/u[name]/24'
      views: never
    }
    'src/pages/users/[userId=int].vue': {
      routes: '/users/[userId=int]'
      views: never
    }
    'src/pages/users/sub-[first]-[second].vue': {
      routes: '/users/sub-[first]-[second]'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
